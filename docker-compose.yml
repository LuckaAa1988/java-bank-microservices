version: '3.8'
services:
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - AUTHORIZATION_URI=${AUTHORIZATION_URI}
      - TOKEN_URI=${TOKEN_URI}
      - GATEWAY_CLIENT_SECRET=${GATEWAY_CLIENT_SECRET}
    depends_on:
      keycloak:
        condition: service_healthy
  exchange-service:
    build:
      context: ./exchange-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - EXCHANGE_REDIS_HOST=${EXCHANGE_REDIS_HOST}
      - EXCHANGE_REDIS_PORT=${EXCHANGE_REDIS_PORT}
    depends_on:
        keycloak:
          condition: service_healthy
  accounts-service:
    build:
      context: ./accounts-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - AUTHORIZATION_URI=${AUTHORIZATION_URI}
      - TOKEN_URI=${TOKEN_URI}
      - GATEWAY_URL=${GATEWAY_URL}
      - REALM_NAME=${REALM_NAME}
      - ACCOUNTS_CLIENT_SECRET=${ACCOUNTS_CLIENT_SECRET}
      - ACCOUNTS_DB_URL=${ACCOUNTS_DB_URL}
      - ACCOUNTS_DB_USER=${ACCOUNTS_DB_USER}
      - ACCOUNTS_DB_PASSWORD=${ACCOUNTS_DB_PASSWORD}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
    depends_on:
      keycloak:
        condition: service_healthy
  exchange-generator-service:
    build:
      context: ./exchange-generator-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - AUTHORIZATION_URI=${AUTHORIZATION_URI}
      - TOKEN_URI=${TOKEN_URI}
      - GATEWAY_URL=${GATEWAY_URL}
      - EXCHANGE_GENERATOR_CLIENT_SECRET=${EXCHANGE_GENERATOR_CLIENT_SECRET}
    depends_on:
      keycloak:
        condition: service_healthy
  frontend-service:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - AUTHORIZATION_URI=${AUTHORIZATION_URI}
      - TOKEN_URI=${TOKEN_URI}
      - GATEWAY_URL=${GATEWAY_URL}
      - FRONTEND_CLIENT_SECRET=${FRONTEND_CLIENT_SECRET}
    depends_on:
      keycloak:
        condition: service_healthy
  cash-service:
    build:
      context: ./cash-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - AUTHORIZATION_URI=${AUTHORIZATION_URI}
      - TOKEN_URI=${TOKEN_URI}
      - GATEWAY_URL=${GATEWAY_URL}
      - CASH_CLIENT_SECRET=${CASH_CLIENT_SECRET}
    depends_on:
      keycloak:
        condition: service_healthy
  transfer-service:
    build:
      context: ./transfer-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - AUTHORIZATION_URI=${AUTHORIZATION_URI}
      - TOKEN_URI=${TOKEN_URI}
      - GATEWAY_URL=${GATEWAY_URL}
      - TRANSFER_CLIENT_SECRET=${TRANSFER_CLIENT_SECRET}
    depends_on:
      keycloak:
        condition: service_healthy
  blocker-service:
    build:
      context: ./blocker-service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
    depends_on:
      keycloak:
        condition: service_healthy
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    environment:
      - EUREKA_URL=${EUREKA_URL}
      - JWK_SET_URI=${JWK_SET_URI}
      - NOTIFICATION_DB_URL=${NOTIFICATION_DB_URL}
      - NOTIFICATION_DB_USER=${NOTIFICATION_DB_USER}
      - NOTIFICATION_DB_PASSWORD=${NOTIFICATION_DB_PASSWORD}
    depends_on:
      keycloak:
        condition: service_healthy
  redis:
    image: redis:8.0-M04-bookworm
    ports:
      - "6379:6379"
  accounts-db:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${ACCOUNTS_DB_NAME}
      - POSTGRES_USER=${ACCOUNTS_DB_USER}
      - POSTGRES_PASSWORD=${ACCOUNTS_DB_PASSWORD}
  notification-db:
    image: postgres:17-alpine
    ports:
      - "5433:5432"
    volumes:
      - /var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${NOTIFICATION_DB_NAME}
      - POSTGRES_USER=${NOTIFICATION_DB_USER}
      - POSTGRES_PASSWORD=${NOTIFICATION_DB_PASSWORD}
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      - KC_HEALTH_ENABLED=true
      - KC_FRONTEND_URL=${KC_FRONTEND_URL}
      - KC_PROXY_ADDRESS_FORWARDING=true
    command: start-dev --import-realm
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 4s
